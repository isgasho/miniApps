// Code generated by go-bindata.
// sources:
// templates/ccm.md
// templates/ncm.md
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCcmMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x6d\x6f\xe3\xb8\x11\xfe\xae\x5f\x31\x38\xa0\x8b\x3b\xc3\xab\x38\xef\x2f\x2d\x8a\x3a\xce\xed\x76\xd1\x24\x97\xb5\x83\x5b\x14\xd8\x2f\x63\x72\x64\xb1\xa1\x48\x1d\x49\xd9\x51\x6d\xfd\xf7\x62\x48\xdb\xb1\xb3\xd9\xbb\x16\xa8\x11\xd8\x0a\x39\x24\x9f\x79\xe6\x99\xe1\xa8\xd7\xfb\x75\xfc\x70\x7b\xb5\x5c\xe6\x9f\x1b\x1b\x30\x28\x6b\xf2\x31\xcd\x94\x35\x5d\xb7\x3f\x7a\x87\xa2\x54\x86\x1e\xdb\x9a\xba\xee\x6a\xfc\xf3\xfd\xd5\xf0\x6e\xb4\x6f\x72\x8d\xe6\xe9\x1e\x2b\x7a\xbd\x74\x4c\xc5\xbd\xed\xba\x5e\x0f\xfe\xdb\x4f\xaf\x77\x83\x81\x78\x17\xfe\xe5\xa5\xd9\x5f\xa6\xee\xe0\xaf\xbf\xb3\x24\xdb\x3b\x72\x28\xa5\x23\xef\xbb\x2e\xcb\x6e\x08\x1d\x4c\x94\xeb\x67\x59\xaf\x37\x69\xa6\x57\x30\x26\x43\x0b\xd4\x60\x8b\x82\x1c\x7c\xb0\x0e\x46\xb6\xaa\x4b\x47\xc6\xab\x39\xc1\xd0\x98\x06\x35\xdc\xa1\x32\x81\x0c\x1a\x41\x30\xb2\x26\x38\x14\x21\x1a\xff\xd3\x36\x0e\x46\x8d\x73\x64\x44\x0b\x23\xdb\x98\xa0\xcc\xec\x00\x6e\x28\x90\xe0\x47\x58\x73\xe5\xe1\xc7\xe5\xb2\x4a\xcf\xcc\x8b\x87\x6f\xf9\xf4\x5d\xf7\x53\xaf\x97\x65\x8f\xa5\xf2\xc0\x7f\x06\x84\x35\x86\x37\xb2\x06\x16\x2a\x94\x10\x4a\x02\x9c\xda\x39\x81\x47\x25\x79\x3a\x62\xe9\xc3\x82\x60\x61\x1b\x2d\x41\xab\x27\x82\x60\x41\x99\xc2\xba\x0a\x5a\xdb\x40\x28\x31\xf0\x83\x83\xe1\xdd\x08\x6a\x72\xca\x4a\x28\xd1\x83\xb0\x55\xad\x29\x90\x04\x6b\xa0\xd7\xdb\x63\xed\xe7\xe7\x5a\xb9\x76\x4b\x79\xf6\xc9\x40\x60\x5c\x2f\x88\xe2\xa1\x25\xce\x09\xc8\x08\x6d\x3d\x49\x28\xc9\x51\xc4\xd9\xeb\x0d\xf3\xbb\x7c\x94\xf7\x7a\x5b\x8c\x6b\x8a\x35\x85\x40\x0e\xa8\x28\x78\x97\x39\x41\xe1\x6c\xb5\x09\x32\xec\x41\x78\x88\x48\xa3\x58\x0a\xeb\x92\x07\x4f\xca\x44\xb7\xbd\x92\xe4\xa2\x19\x60\x1a\x29\x94\xab\xd2\x3a\x0e\xee\xdf\x6d\x4d\xf0\x4b\xe3\xd6\x6c\xa5\xb3\x13\xa7\x5a\x19\x4a\x6c\xc6\x1d\x1d\xfd\xd6\x28\x47\x15\x99\x90\x47\x47\x0b\x40\xd3\x82\xd0\xe8\x54\xa1\x44\x3a\x43\xf9\x8d\x9d\x84\x5a\x13\x7a\x82\x82\x48\x43\xe1\x28\xb2\x2d\x50\x6b\x68\x7c\xe2\xf1\xf2\xf2\xe8\xf4\x68\x70\x72\x79\x74\x79\x30\x38\xbf\x7c\x7f\x74\x76\x7e\x76\x76\x76\x72\x94\x42\x8b\xe6\x89\x65\xc1\x71\x51\x26\xc6\xb3\x22\x34\x8b\x52\x69\x8a\x9e\xa0\xf7\x8d\xdb\x58\xf0\xf4\x94\x3c\x73\x07\x8c\xd5\x93\x9b\x2b\x91\x0c\x99\x89\x0c\x43\x20\x93\x58\xd0\x0b\x6c\x7d\x9e\x65\x2c\x49\x0f\x05\xaa\x50\x16\x8d\xd6\x6d\x3f\xcb\xb2\x0f\xd6\xf5\xa1\xd7\xfb\x95\xa6\x30\xb6\x53\x5b\xe1\x13\xfc\xf8\xf0\x13\xdc\x06\x19\x5d\x8e\xf9\xc4\xac\x0d\x9b\x50\x5a\xa7\xfe\x4d\x12\x26\x6a\x66\x30\x58\xd7\xb2\xc1\xfb\xef\x7f\x78\x19\xa7\x8c\xa3\xf2\x8f\x73\x86\xf7\xe2\x22\x03\xbe\x64\xc2\x2a\x36\xc1\x0d\x0d\x29\x09\xc0\xd7\x24\x54\xa1\x48\x26\x7e\x94\x07\x9c\x39\x8a\xf1\x61\x7a\xd9\x34\x90\xab\xfc\x26\xee\x52\x45\xff\xab\x0d\x0f\x1e\xa6\xa4\xed\x22\xaa\xe0\x31\x1a\xbe\xe3\xf3\x93\x99\xbf\x62\x08\x87\x39\x3c\xee\x6f\x9c\xf0\x38\x62\x44\x40\x9c\x3a\x82\x64\x54\x1d\x9f\xb7\x4e\x19\x5b\x14\x60\x0d\x41\xcb\x55\x24\xca\x96\x27\x25\x06\xca\x84\xad\x2a\x32\x22\xa9\x28\x3b\xca\xe1\x9a\x0a\xeb\x08\x02\xc6\x68\xb3\x9d\x6f\x7d\xa0\x0a\x1a\x23\xc9\xed\x9c\x8c\xec\x08\xa0\x10\x54\x07\xe6\xaa\x0f\x08\x81\x43\xbe\x50\x5a\xc3\x94\x32\x81\xce\x31\x1b\xb6\x09\x30\x6d\xa3\x0c\xc8\xcc\x94\x21\x16\xb4\x81\xda\x91\xe7\x93\x3d\x6b\x84\xcf\x71\x94\x86\x38\x89\xa2\xf2\xe3\xe8\x27\xe3\x83\x0a\x4d\xca\x8f\xe3\x1c\x86\xa6\x85\x8f\x76\x4e\xce\x44\x14\x9a\xe6\x8a\x3c\xa8\xaa\x8e\x79\x3c\x6d\xe3\xa2\xd9\xd6\xe0\xcf\xa0\x02\x27\x41\x42\xef\x83\xb5\x32\x95\x15\xdf\x88\x32\x5b\xaf\x8e\x88\x6b\x6c\x71\xaa\x09\xe8\x39\x38\x8c\x41\x98\x24\xd1\x7a\xae\xb5\x92\x1c\xc9\x18\x83\x2f\x94\x48\xe0\xec\xa9\x9d\x9d\x2b\x49\xb0\xaf\xa3\x5d\x01\xf9\xcd\x1e\x09\x40\x2c\x83\x5b\x0a\x83\xcd\x9e\x88\xea\x3d\x15\x29\x03\x33\x06\xb9\xb0\x2e\x46\x60\x2b\x94\x3c\x86\x7f\x77\xef\x08\x5b\xb0\xab\x30\xb5\xa1\x64\x46\xe7\x2c\xa6\x79\xca\xb3\xa9\x23\x7c\x92\x76\x61\x62\x92\xfb\xb5\x74\xe2\x22\x65\x84\x6e\x24\xc5\x83\x85\x4d\x69\x1a\xf5\x82\x2e\x78\xa0\x67\x8e\x29\x84\xd2\x7a\xda\x96\x2c\x4a\xd5\xab\xa9\x22\x49\xb1\x58\x4f\x02\x8a\x27\x72\xf0\x0e\xfe\x41\x6d\x8d\x12\x26\x41\xf1\x40\xd4\xd1\xc3\x0b\x98\xea\x35\xe6\x29\x6d\x98\x93\xf0\xb9\x41\x17\xc8\xe9\x36\x46\x77\xd7\x3d\xf6\x61\x4b\xdf\x37\xeb\x64\x2a\x36\xc6\xba\x0a\xf5\x96\xad\x32\xd6\x90\x58\x55\x74\xc6\x1e\x6d\x26\x64\xac\x31\x27\x39\x5c\x33\x2b\xf0\x42\xcb\x76\x67\x47\xbe\xb6\x86\xb7\xe6\x12\xab\x0c\x9c\x5c\x40\xe9\x7c\x9e\x9d\xe6\xf0\x85\x6d\x8c\x0d\x6b\xb6\x39\xe5\x6a\x8d\x3e\x28\x11\x29\x83\x77\xb1\xf2\x3e\x94\xad\x57\x02\x35\xdc\x60\x85\x33\x8a\x1a\xfa\xf9\x99\x99\x56\x66\x16\xb5\x73\x87\xff\xb2\x0e\x9a\x1a\x66\x0e\x65\x2a\xd0\x6b\xe6\x53\x92\xe5\x59\xc6\xfa\x66\xd0\xac\x43\x72\x06\x35\xeb\x6c\xaf\xcc\x34\xa2\xe4\xe4\xdb\x65\x75\xbd\x09\x86\x80\xa2\x4c\xd9\x29\x04\x79\x6f\x9d\x22\x9f\x51\x10\x79\x44\x6f\x9d\x9a\x29\x83\x5a\xb7\x1b\x05\xc8\x4d\x2d\xdf\x5c\x76\x39\x8c\xa9\x46\xe5\x62\x56\x56\xa8\x8b\xc6\xc4\x3b\x93\x39\xb4\x0e\x64\xf4\x8c\xd9\x8f\xfa\x77\x18\x60\xaa\x02\xf9\xfe\x7a\xc6\x6f\x66\x50\x08\x25\xc9\x84\x3e\x04\x87\xc6\xd7\xd6\xa5\xbb\x11\x0c\xcd\xb4\x9a\x51\x2c\x18\x06\x43\xe3\x50\x83\x54\x1e\x3d\x5f\xae\x4c\x8e\x8f\xee\x18\x6b\xde\xfb\x80\x46\xa2\x93\x40\x9a\x44\x70\x91\xda\xda\x2e\x38\x00\x46\xae\x9f\x0a\xdd\x88\xd0\xac\xa9\x74\xe0\x4b\xeb\x02\x08\xe5\x44\xa3\x42\xfe\xba\xfe\x67\xa9\xe6\xaf\xaf\xf5\x1b\x0a\xa8\x74\x2a\xac\xdb\xc1\x74\x75\x5f\xbd\x6e\x2a\x5e\x6e\xf4\x2c\xbb\xb3\x92\x34\x70\x2f\xb4\x1a\x63\xa0\xd5\xc7\xc9\xe3\xdf\x0e\x2f\xfe\xb4\x7a\xb4\x01\x35\x7c\xe1\xfb\xf9\x11\x9f\x57\x9f\x43\xbb\x9a\x34\x53\x88\xc3\xab\x1d\x24\xab\xed\xd7\xce\xef\xce\xbf\x2f\x43\xab\xec\xf4\xb4\x7f\xbb\x3a\xe2\xaf\xe3\x41\x7f\xcc\x4f\xe3\xd5\xe1\x7a\x6c\xbc\xca\x96\xcb\xf7\xe0\xd0\xcc\xe8\xed\xa6\x8c\xdb\xc9\x88\xb6\xeb\x56\xcb\x65\x3e\x8e\x3d\x11\x3f\x7d\xf4\x21\x3d\x44\x70\x0c\xf9\x11\x9f\xd3\xc8\xe7\xd0\xee\x4c\x75\x5d\x3a\x84\x8c\xec\xba\xec\xa3\x43\x23\x93\x3f\xfc\xd9\x63\x68\x6b\xbe\x73\x2b\x3f\x60\x1b\xc5\xb8\x66\x9a\xc9\x5b\x2e\x55\x01\xf4\x1b\x7c\xd3\xaa\xc3\x0f\xd7\xe3\x9b\x1f\xba\x2e\xdb\x2c\xe2\x46\x7c\xb3\x72\x35\x3c\x10\x91\xf1\x2b\xd8\x6d\x05\x1e\xe6\x21\x8f\xbd\xc0\x57\x13\xad\x93\xc5\xe4\xfa\xd3\x57\x73\xed\xd0\x88\xf2\x0a\x7e\xd1\x12\x1e\x50\x3a\x84\xb1\x45\xf9\xd5\x0c\x0f\x46\x70\x6f\xaf\xe0\xf8\xf8\xfc\xfc\xe2\xfc\xe2\xf0\xec\x68\xf0\xd5\x7c\xfa\x30\x19\xc1\xc8\xca\xb4\xf8\x7e\x30\x38\x1c\x9c\x5d\x9c\xaf\x3d\xd7\x9e\xfe\xef\xa8\x1e\xac\x6e\x03\x89\xd2\x28\x01\x7d\x18\x96\x15\x49\x9c\xee\xc1\x1b\x5c\x9e\x9e\x9d\x9c\x1d\x5e\x5c\x1e\xbd\x01\x6f\x70\x38\x38\x39\xde\x0d\xcc\x77\x5a\x9c\xd5\x37\x3d\xcf\xc5\x79\xff\x76\x75\x71\xd1\xbf\x5d\x6d\x3d\x8a\xad\xc6\x7e\x2c\xd7\x53\x71\x66\x37\xa4\xdc\x5a\xa5\x9e\xfb\x9a\x4a\xd4\x05\x27\xea\xce\xfd\xfc\xdd\xd7\x9a\xb7\xd6\xbd\x62\x8c\x09\xdb\x1c\xf3\x46\x3b\xd7\x38\x82\x77\x7c\xe1\x54\x75\xfe\xe6\x2b\xd8\x1f\xae\x61\x3d\xc6\x56\xfd\x7f\x78\x83\xfb\xdd\xf7\x3a\xd8\x7d\xb1\xcb\xfe\x13\x00\x00\xff\xff\xb0\xa9\x5c\xfb\x84\x0e\x00\x00")

func templatesCcmMdBytes() ([]byte, error) {
	return bindataRead(
		_templatesCcmMd,
		"templates/ccm.md",
	)
}

func templatesCcmMd() (*asset, error) {
	bytes, err := templatesCcmMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/ccm.md", size: 3716, mode: os.FileMode(420), modTime: time.Unix(1526112345, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesNcmMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x6d\x6f\x23\xb9\x0d\xfe\x3e\xbf\x82\x08\xd0\xc5\x9d\xe1\x9d\x75\xb2\x79\x75\x8b\xa2\x4e\xf6\xa5\x41\x93\x6c\xd6\x31\xee\x50\x60\xbf\xd0\x12\xc7\xa3\x46\x23\xcd\x49\x1a\x3b\x53\xdb\xff\xbd\xa0\xe4\x71\xec\x6c\xf6\xae\x05\x6a\x04\xf1\x58\x22\x45\xf2\x79\x48\x8a\xd3\xeb\xfd\x32\xbe\xbf\x19\x2e\x97\xf9\xd7\xc6\x06\x0c\xca\x9a\x7c\x4c\x33\x65\xcd\x7a\xbd\xbf\x7a\x8b\xa2\x54\x86\x26\x6d\x4d\xeb\xf5\x70\xfc\xf1\x6e\x38\xba\xbd\xda\x17\xb9\x44\xf3\x78\x87\x15\xbd\x54\x1d\x53\x71\x67\xd7\xeb\x5e\x0f\xfe\xdb\x4f\xaf\xf7\x01\x03\xf1\x29\xfc\xcd\xaa\xd9\x5f\xa6\xee\xdd\x5f\x7f\x47\x25\xdb\x33\x39\x92\xd2\x91\xf7\xeb\x75\x96\x7d\x20\x74\xf0\xa0\x5c\x3f\xcb\x7a\xbd\x87\x66\x3a\x84\x31\x19\x5a\xa0\x06\x5b\x14\xe4\xe0\x93\x75\x70\x65\xab\xba\x74\x64\xbc\x9a\x13\x8c\x8c\x69\x50\xc3\x2d\x2a\x13\xc8\xa0\x11\x04\x57\xd6\x04\x87\x22\x44\xe1\x7f\xda\xc6\xc1\x9d\x0d\xbc\xdc\x98\xa0\xcc\x0c\x36\xe0\xc0\x4f\xcb\x65\x95\x1e\x19\x07\x0f\xdf\xe3\xe7\xd7\xeb\x9f\x7b\xbd\x2c\x9b\x94\xca\x03\xff\x19\x10\xd6\x18\x12\x2c\x04\x0b\x15\x4a\x08\x25\x01\x4e\xed\x9c\xc0\xa3\x92\xbc\x1d\x6d\xf7\x61\x41\xb0\xb0\x8d\x96\xa0\xd5\x23\x41\xb0\xa0\x4c\x61\x5d\x05\xad\x6d\x20\x94\x18\xf8\xc1\xc1\xe8\xf6\x0a\x6a\x72\xca\x4a\x28\xd1\x83\xb0\x55\xad\x29\x90\x04\x6b\xa0\xd7\xdb\x43\xe9\xe3\x53\xad\x5c\xbb\x85\x38\xbb\x36\x10\xd8\xaf\x67\x8f\xa2\xd1\x12\xe7\x04\x64\x84\xb6\x9e\x24\x94\xe4\x28\xfa\xd9\xeb\x8d\xf2\xdb\xfc\x2a\xef\xf5\xb6\x3e\x6e\x20\xd5\x14\x02\x39\xa0\xa2\xe0\x53\xe6\x04\x85\xb3\x55\x47\x2a\xec\xb9\x70\x1f\x3d\x8d\xc9\x51\x58\x97\x22\x78\x54\x26\x86\xed\x95\x24\x17\xc5\x00\xd3\x4a\xa1\x5c\x95\xf4\x98\xcc\xbf\xdb\x9a\xe0\x4b\xe3\x36\x68\x25\xdb\x09\x53\xcd\x6c\x44\x2f\xe3\x89\x8e\x7e\x6b\x94\xa3\x8a\x4c\xc8\x63\xa0\x05\xa0\x69\x41\x68\x74\xaa\x50\x22\xd9\x50\xbe\x93\x93\x50\x6b\x42\x4f\x50\x10\x69\x28\x1c\x45\xb4\x05\x6a\x0d\x8d\x4f\x38\x5e\x5c\x1c\x9d\x1c\x0d\x8e\x2f\x8e\x2e\xde\x0d\xce\x2e\xde\x1e\x9d\x9e\x9d\x9e\x9e\x1e\x1f\x25\x6a\xd1\x3c\x72\x56\x30\x2f\xca\x44\x3e\x2b\x42\xb3\x28\x95\xa6\x18\x09\x7a\xdf\xb8\x4e\x82\xb7\xa7\xe4\x19\x3b\x60\x5f\x3d\xb9\xb9\x12\x49\x90\x91\xc8\x30\x04\x32\x09\x05\xbd\xc0\xd6\xe7\x59\xc6\x29\xe8\xa1\x40\x15\xca\xa2\xd1\xba\xed\x67\x59\xf6\xc9\xba\x3e\xf4\x7a\xbf\xd0\x14\xc6\x76\x6a\x2b\x7c\x84\x9f\xee\x7f\x86\x9b\x20\x63\xc8\xb1\x7e\x18\xb5\x51\x13\x4a\xeb\xd4\xbf\x49\xc2\x83\x9a\x19\x0c\xd6\xb5\x2c\xf0\xf6\xc7\x1f\x56\xe3\x12\x71\x54\xfe\x71\x8d\xf0\x59\xdc\x54\xc0\x97\x0c\x58\xc5\x22\xd8\xc1\xb0\xa9\x13\x5f\x93\x50\x85\x22\x99\xf0\x51\x1e\x70\xe6\x28\xf2\xc3\xf0\xb2\x68\x20\x57\xf9\x8e\x77\xa9\x62\xfc\x55\x87\x83\x87\x29\x69\xbb\x88\x59\x30\x89\x82\x6f\xd8\x7e\x12\xf3\x43\x76\xe1\x30\x87\xc9\xfe\xc1\xc9\x1f\x47\xec\x11\x10\x97\x8e\x20\x19\xb3\x8e\xed\x6d\x4a\xc6\x16\x05\x58\x43\xd0\x72\xd7\x88\x69\xcb\x9b\x12\x03\x65\xc2\x56\x15\x19\x91\xb2\x28\x3b\xca\xe1\x92\x0a\xeb\x08\x02\x46\xb6\x59\xce\xb7\x3e\x50\x05\x8d\x91\xe4\x76\x2c\x23\x07\x02\x28\x04\xd5\x81\xb1\xea\x03\x42\x60\xca\x17\x4a\x6b\x98\x52\x26\xd0\x39\x46\xc3\x36\x01\xa6\x6d\x4c\x03\x32\x33\x65\x88\x13\xda\x40\xed\xc8\xb3\x65\xcf\x39\xc2\x76\x1c\xa5\x25\x2e\xa2\x98\xf9\x71\xf5\xda\xf8\xa0\x42\x93\xea\xe3\x7d\x0e\x23\xd3\xc2\x67\x3b\x27\x67\xa2\x17\x9a\xe6\x8a\x3c\xa8\xaa\x8e\x75\x3c\x6d\xa3\xd2\x6c\x2b\xf0\x67\x50\x81\x8b\x20\x79\xef\x83\xb5\x32\xb5\x15\xdf\x88\x32\xdb\x68\x47\x8f\x6b\x6c\x71\xaa\x09\xe8\x29\x38\x8c\x24\x3c\xa4\xa4\xf5\xdc\x5b\x25\x39\x92\x91\x83\x5f\x29\x81\xc0\xd5\x53\x3b\x3b\x57\x92\x60\x3f\x8f\x76\x13\xc8\x77\x67\x24\x07\x62\x1b\xdc\x42\x18\x6c\xf6\x48\x54\xef\x65\x91\x32\x30\x63\x27\x17\xd6\x45\x06\xb6\x89\x92\x47\xfa\x77\xcf\x8e\x6e\x0b\x0e\x15\xa6\x36\x94\x8c\xe8\x9c\x93\x69\x9e\xea\x6c\xea\x08\x1f\xa5\x5d\x98\x58\xe4\x7e\x93\x3a\x51\x49\x19\xa1\x1b\x49\xd1\xb0\xb0\xa9\x4c\x63\xbe\xa0\x0b\x1e\xe8\x89\x39\x85\x50\x5a\x4f\xdb\x96\x45\x5c\xe1\xf1\x57\x53\x45\x9c\x62\xbf\x3e\xf8\xf2\x0f\xf0\x01\xab\xfa\x00\xde\xc0\xc1\xb5\x79\x84\x4b\x1b\x82\xa6\x83\x98\x4b\xf7\xcf\x0e\x55\x2f\xfd\x9e\x52\x87\x9e\x84\xaf\x0d\xba\x40\x4e\xb7\x91\xe1\x49\xb9\x85\xad\x73\xd4\xb3\xed\x88\xe0\x10\x84\x26\x34\x8c\x8c\x2d\xc0\xd7\xca\x48\x4d\xbe\xcf\x9d\xdc\x4a\x5e\x95\x0a\xeb\xd2\xe1\xac\x02\x51\xa2\x99\x51\x3f\x9b\x92\x0e\x20\x4a\x12\x8c\x67\x7f\xfb\xc4\xfa\xe3\xfb\xdb\x2e\xf4\xca\x06\xee\x35\xbb\xa7\xa3\x72\x50\x28\xcd\x5d\xff\xcd\xae\x5a\xb6\x31\x0b\x8d\x51\x21\xcf\x8e\xf7\x59\x61\xe8\xb7\xac\x7f\x17\xaa\x4c\x3d\xd2\x58\x57\xa1\xde\x92\x5c\xc6\xd6\x17\x9b\xa1\xce\xd8\x9b\x6e\x43\xc6\xd6\x78\x92\xc3\x25\x93\x09\xcf\x6c\x6e\x4f\x76\xe4\x6b\x6b\xf8\x68\xbe\x19\x94\x81\xe3\x73\x28\x9d\x8f\x09\xfc\xf1\x89\xd1\x53\x66\x16\x13\xf7\x16\xff\x65\x1d\x34\x35\xcc\x1c\xca\x74\x3b\x6c\x62\x4f\x15\x9e\x67\x19\x17\x17\x9b\xe6\x22\x20\x67\x50\x73\x92\xef\xf5\xb8\x46\x94\xcc\xc5\x2e\x9d\x9b\x43\x30\x04\x14\x65\x6a\x0d\x42\x90\xf7\xd6\x29\xf2\x19\x05\x91\x83\xb1\x01\xac\x53\x33\x65\x50\xeb\xb6\x63\x55\x76\x17\x49\x77\xd3\xe6\x30\xa6\x1a\x95\x8b\x2d\xa1\x42\x5d\x34\x26\x5e\xd8\x11\x76\x07\x12\x2b\x9c\x45\x0c\x63\xf1\x39\x0c\x30\x55\x81\xd9\x4f\x3b\xbe\xdb\x41\x21\x94\x24\x13\xfa\x10\x1c\x1a\x5f\x5b\x97\x2e\x66\x30\x34\xd3\x6a\x46\xb1\x5b\x19\x0c\x8d\x43\x0d\x52\x79\xf4\xcc\x31\x83\xe3\x63\x38\xc6\x9a\xb7\x3e\xa0\x91\xe8\x24\x90\x26\x11\x9c\x12\xa8\xa1\xb6\x0b\x6e\x81\x46\x6e\x9e\x0a\xdd\x88\xd0\x6c\xa0\x74\xe0\x4b\xeb\x02\x08\xe5\x44\xc3\x79\x91\xbd\xbc\x6f\xe2\x85\xb3\x99\x29\x3e\x50\x40\xa5\x53\x57\xdf\x2e\xa6\xb9\x61\xf8\x72\xa2\x79\x1e\x27\xb2\xec\xd6\x4a\xd2\xc0\x83\xd8\x6a\x8c\x81\x56\x9f\x1f\x26\x7f\x3b\x3c\xff\xd3\x6a\x62\x03\x6a\xf8\x95\x87\x83\x09\x3e\xad\xbe\x86\x76\xf5\xd0\x4c\x21\x2e\xaf\x76\x3c\x59\x6d\xff\xed\x7c\xef\xfc\x7c\x5e\x5a\x65\x27\x27\xfd\x9b\xd5\x11\xff\x7b\x3f\xe8\x8f\xf9\x69\xbc\x3a\xdc\xac\x8d\x57\xd9\x72\xf9\x16\x1c\x97\xd8\xeb\x13\x21\xcf\xae\xd1\xdb\xf5\x7a\xb5\x5c\xe6\xe3\x38\x90\xf1\xd3\x67\x1f\xd2\x43\x74\x8e\x5d\x9e\xe0\x53\x5a\xf9\x1a\xda\x9d\xad\xf5\x3a\x19\x21\x23\xd7\xeb\xec\xb3\x43\x23\x53\x3c\xfc\xd9\x43\x68\x2b\xbe\x33\x12\xdc\x63\x1b\x93\x71\x83\x34\x83\xb7\x5c\xaa\x02\xe8\x37\xf8\xee\xbd\x00\x0e\x2e\xc7\x1f\x0e\xd6\xeb\xac\x53\xe2\xa9\xbf\xd3\x5c\x8d\xde\x89\x88\xf8\x10\x76\xe7\x90\xfb\x79\xc8\xe3\x20\xf2\xcd\x44\xe9\x24\xf1\x70\x79\xfd\xcd\x5c\x3a\x34\xa2\x1c\xc2\x17\x2d\xe1\x1e\xa5\x43\x18\x5b\x94\xdf\xcc\xe8\xdd\x15\xdc\xd9\x21\xbc\x7f\x7f\x76\x76\x7e\x76\x7e\x78\x7a\x34\xf8\x66\xae\x3f\x3d\x5c\xc1\x95\x95\x49\xf9\x6e\x30\x38\x1c\x9c\x9e\x9f\x6d\x22\xd7\x9e\xfe\xef\x5e\xdd\x5b\xdd\x06\x12\xa5\x51\x02\xfa\x30\x2a\x2b\x92\x38\xdd\x73\x6f\x70\x71\x72\x7a\x7c\x7a\x78\x7e\x71\xf4\x8a\x7b\x83\xc3\xc1\xf1\xfb\x5d\x62\x7e\x30\x5f\xad\xbe\x1b\xb8\xce\xcf\xfa\x37\xab\xf3\xf3\xfe\xcd\x6a\x1b\x51\x9c\x73\xf6\xb9\xdc\x6c\xc5\x9d\x48\x69\x62\x94\xc7\xba\x34\xef\x5f\x52\x89\xba\xe0\x3a\xdd\x99\x0d\x7e\xf8\x0a\xf5\x9a\xde\x0b\xc0\x18\xaf\xce\xcc\x2b\xa3\x64\xe3\x08\xde\xc0\x03\xdf\x72\xf9\xab\xaf\x7b\x7f\xa8\xc3\xe9\x18\x5f\x13\xfe\x87\xb7\xc5\xdf\x7d\x87\x84\xdd\x97\xc8\xec\x3f\x01\x00\x00\xff\xff\x82\x8a\x1f\xb2\xf0\x0e\x00\x00")

func templatesNcmMdBytes() ([]byte, error) {
	return bindataRead(
		_templatesNcmMd,
		"templates/ncm.md",
	)
}

func templatesNcmMd() (*asset, error) {
	bytes, err := templatesNcmMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/ncm.md", size: 3824, mode: os.FileMode(420), modTime: time.Unix(1526112337, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/ccm.md": templatesCcmMd,
	"templates/ncm.md": templatesNcmMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"ccm.md": &bintree{templatesCcmMd, map[string]*bintree{}},
		"ncm.md": &bintree{templatesNcmMd, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

